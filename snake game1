<!DOCTYPE html>
<html>
  <head>
    <title>Hello, World!</title>
    <link rel="stylesheet" href="styles.css" />
  </head>
  <body>
      <h1 class="title">Hello World! </h1>
      <p id="currentTime"></p>
      <script src="script.js"></script>
  </body>
</html><!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Snake Game</title>

  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      background-color: #f5f5f5;
    }

    .game-container {
      position: relative;
      background-color: #222;
      border: 2px solid #fff;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
    }

    canvas {
      display: block;
    }

    .game-over {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 24px;
      color: white;
      font-weight: bold;
      display: none;
    }

    .score {
      position: absolute;
      top: 10px;
      left: 10px;
      font-size: 20px;
      color: white;
      font-weight: bold;
    }

    .start-btn {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 20px;
      padding: 10px 20px;
      background-color: #28a745;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
  </style>
</head>
<body>

<div class="game-container">
  <canvas id="gameCanvas" width="400" height="400"></canvas>
  <div class="score" id="score">Score: 0</div>
  <div class="game-over" id="gameOverMessage">Game Over! Press F5 to Restart</div>
  <button class="start-btn" id="startButton">Start Game</button>
</div>

<!-- Bootstrap 5 JS -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>

<script>
  // Get the canvas and context
  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas.getContext('2d');

  // Set up initial game variables
  const gridSize = 20;
  const canvasSize = 400;
  let snake = [{ x: 200, y: 200 }];
  let direction = { x: gridSize, y: 0 };
  let food = {};
  let score = 0;
  let isGameOver = false;
  let gameInterval;
  const speed = 150; // Slowed down the snake speed by setting a higher interval time

  // Draw the game objects
  function drawGame() {
    if (isGameOver) {
      displayGameOver();
      return;
    }

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Draw snake
    snake.forEach(segment => {
      ctx.fillStyle = 'green';
      ctx.fillRect(segment.x, segment.y, gridSize, gridSize);
    });

    // Draw food
    ctx.fillStyle = 'red';
    ctx.fillRect(food.x, food.y, gridSize, gridSize);

    // Move snake
    moveSnake();
    checkFoodCollision();
    checkWallCollision();
    checkSelfCollision();

    // Update score
    document.getElementById('score').innerText = `Score: ${score}`;
  }

  // Move the snake in the current direction
  function moveSnake() {
    const head = { ...snake[0] };

    head.x += direction.x;
    head.y += direction.y;

    snake.unshift(head);

    if (head.x === food.x && head.y === food.y) {
      score++;
      createFood();
    } else {
      snake.pop();
    }
  }

  // Check for food collision
  function checkFoodCollision() {
    const head = snake[0];
    if (head.x === food.x && head.y === food.y) {
      score++;
      createFood();
    }
  }

  // Create a new food item at a random position
  function createFood() {
    food = {
      x: Math.floor(Math.random() * (canvasSize / gridSize)) * gridSize,
      y: Math.floor(Math.random() * (canvasSize / gridSize)) * gridSize
    };
  }

  // Check for wall collision
  function checkWallCollision() {
    const head = snake[0];
    if (head.x < 0 || head.x >= canvasSize || head.y < 0 || head.y >= canvasSize) {
      gameOver();
    }
  }

  // Check for self-collision
  function checkSelfCollision() {
    const head = snake[0];
    for (let i = 1; i < snake.length; i++) {
      if (snake[i].x === head.x && snake[i].y === head.y) {
        gameOver();
      }
    }
  }

  // Display the Game Over screen
  function displayGameOver() {
    document.getElementById('gameOverMessage').style.display = 'block';
  }

  // End the game
  function gameOver() {
    isGameOver = true;
    clearInterval(gameInterval); // Stop the game loop
  }

  // Change snake direction based on key press
  function changeDirection(event) {
    if (event.key === 'ArrowUp' && direction.y === 0) {
      direction = { x: 0, y: -gridSize };
    } else if (event.key === 'ArrowDown' && direction.y === 0) {
      direction = { x: 0, y: gridSize };
    } else if (event.key === 'ArrowLeft' && direction.x === 0) {
      direction = { x: -gridSize, y: 0 };
    } else if (event.key === 'ArrowRight' && direction.x === 0) {
      direction = { x: gridSize, y: 0 };
    }
  }

  // Start the game
  function startGame() {
    isGameOver = false;
    snake = [{ x: 200, y: 200 }];
    direction = { x: gridSize, y: 0 };
    score = 0;
    document.getElementById('gameOverMessage').style.display = 'none';

    createFood();
    drawGame();
    gameInterval = setInterval(drawGame, speed); // Slower speed for the snake
  }

  // Listen for keyboard input to change direction
  document.addEventListener('keydown', changeDirection);

  // Start Game button functionality
  document.getElementById('startButton').addEventListener('click', function () {
    startGame();
    this.style.display = 'none'; // Hide the Start button after starting the game
  });

</script>

</body>
</html>
